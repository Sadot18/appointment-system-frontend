/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AppointmentResponseDto } from '../models/appointment-response-dto';
import { cancelAppointment } from '../fn/admin-controller/cancel-appointment';
import { CancelAppointment$Params } from '../fn/admin-controller/cancel-appointment';
import { getAllAppointments } from '../fn/admin-controller/get-all-appointments';
import { GetAllAppointments$Params } from '../fn/admin-controller/get-all-appointments';

@Injectable({ providedIn: 'root' })
export class AdminControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `cancelAppointment()` */
  static readonly CancelAppointmentPath = '/api/admin/appointments/{id}/cancel';

  /**
   * Cancelar cita.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `cancelAppointment()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelAppointment$Response(params: CancelAppointment$Params, context?: HttpContext): Observable<StrictHttpResponse<AppointmentResponseDto>> {
    return cancelAppointment(this.http, this.rootUrl, params, context);
  }

  /**
   * Cancelar cita.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `cancelAppointment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelAppointment(params: CancelAppointment$Params, context?: HttpContext): Observable<AppointmentResponseDto> {
    return this.cancelAppointment$Response(params, context).pipe(
      map((r: StrictHttpResponse<AppointmentResponseDto>): AppointmentResponseDto => r.body)
    );
  }

  /** Path part for operation `getAllAppointments()` */
  static readonly GetAllAppointmentsPath = '/api/admin/appointments';

  /**
   * Obtener todas las citas.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllAppointments()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAppointments$Response(params?: GetAllAppointments$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AppointmentResponseDto>>> {
    return getAllAppointments(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener todas las citas.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllAppointments$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAppointments(params?: GetAllAppointments$Params, context?: HttpContext): Observable<Array<AppointmentResponseDto>> {
    return this.getAllAppointments$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<AppointmentResponseDto>>): Array<AppointmentResponseDto> => r.body)
    );
  }

}
