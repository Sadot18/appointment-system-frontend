/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { login } from '../fn/autenticacion/login';
import { Login$Params } from '../fn/autenticacion/login';
import { LoginResponseDto } from '../models/login-response-dto';
import { signup } from '../fn/autenticacion/signup';
import { Signup$Params } from '../fn/autenticacion/signup';


/**
 * API para login de usuarios
 */
@Injectable({ providedIn: 'root' })
export class AutenticacionService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `signup()` */
  static readonly SignupPath = '/api/auth/signup';

  /**
   * Registro de usuario.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `signup()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  signup$Response(params: Signup$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return signup(this.http, this.rootUrl, params, context);
  }

  /**
   * Registro de usuario.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `signup$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  signup(params: Signup$Params, context?: HttpContext): Observable<string> {
    return this.signup$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `login()` */
  static readonly LoginPath = '/api/auth/login';

  /**
   * Login de usuario.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `login()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  login$Response(params: Login$Params, context?: HttpContext): Observable<StrictHttpResponse<LoginResponseDto>> {
    return login(this.http, this.rootUrl, params, context);
  }

  /**
   * Login de usuario.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `login$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  login(params: Login$Params, context?: HttpContext): Observable<LoginResponseDto> {
    return this.login$Response(params, context).pipe(
      map((r: StrictHttpResponse<LoginResponseDto>): LoginResponseDto => r.body)
    );
  }

}
