/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createService } from '../fn/servicios-medicos/create-service';
import { CreateService$Params } from '../fn/servicios-medicos/create-service';
import { getAllServices } from '../fn/servicios-medicos/get-all-services';
import { GetAllServices$Params } from '../fn/servicios-medicos/get-all-services';
import { MedicalService } from '../models/medical-service';
import { MedicalServiceResponseDto } from '../models/medical-service-response-dto';


/**
 * Gestión de servicios médicos
 */
@Injectable({ providedIn: 'root' })
export class ServiciosMedicosService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllServices()` */
  static readonly GetAllServicesPath = '/api/services-medicos';

  /**
   * Listar todos los servicios.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllServices()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllServices$Response(params?: GetAllServices$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MedicalService>>> {
    return getAllServices(this.http, this.rootUrl, params, context);
  }

  /**
   * Listar todos los servicios.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllServices$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllServices(params?: GetAllServices$Params, context?: HttpContext): Observable<Array<MedicalService>> {
    return this.getAllServices$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MedicalService>>): Array<MedicalService> => r.body)
    );
  }

  /** Path part for operation `createService()` */
  static readonly CreateServicePath = '/api/services-medicos';

  /**
   * Crear servicio (Admin).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createService()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createService$Response(params: CreateService$Params, context?: HttpContext): Observable<StrictHttpResponse<MedicalServiceResponseDto>> {
    return createService(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear servicio (Admin).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createService$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createService(params: CreateService$Params, context?: HttpContext): Observable<MedicalServiceResponseDto> {
    return this.createService$Response(params, context).pipe(
      map((r: StrictHttpResponse<MedicalServiceResponseDto>): MedicalServiceResponseDto => r.body)
    );
  }

}
